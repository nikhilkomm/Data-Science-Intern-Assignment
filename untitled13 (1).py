# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZWUK90pFn_3_3MrQf3Jye90MtUh1ZiRJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from keras.models import Sequential
from keras.layers import Dense, Dropout
from mlxtend.plotting import plot_confusion_matrix
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, roc_auc_score

url ="https://drive.google.com/file/d/1zsffPXT78ifASbeO-i9ROOtbfBRbkC1v/view?usp=sharing"

file_id = url.split('/')[-2]

read_url='https://drive.google.com/uc?id=' + file_id

df = pd.read_csv(read_url)

df.head()

df.info()

df.isnull().sum()

df.describe()

corr = df.corr()
sns.heatmap(corr,annot=True,linewidth=0.5,fmt=".2f")

from sklearn.model_selection import train_test_split
X = df.iloc[:, 0:4].values  ##  same as X = df.iloc[:, 0:3002].values
y = df.iloc[:, -1].values

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)

X_train.shape

X_test.shape

model = Sequential()

##set up the layers
## input layer
model.add(Dense(units= 16, kernel_initializer= 'uniform', activation = 'relu', input_dim = 4))
## hidden layer
model.add(Dense(units= 10, kernel_initializer= 'uniform', activation = 'relu'))
model.add(Dense(units= 4, kernel_initializer= 'uniform', activation = 'relu'))
##output layer
model.add(Dense(units= 1, kernel_initializer= 'uniform', activation = 'softmax'))

## compiling the ANN

model.compile(optimizer = 'adam', loss ='binary_crossentropy', metrics = ['accuracy'])

history = model.fit(X_train, y_train, batch_size = 25, epochs = 80, validation_split= 0.25)

y_pred_ann = model.predict(X_test)
y_pred_ann = np.where(y_pred_ann > 0.5, 1, 0)

print(classification_report(y_test, y_pred_ann))

cm = confusion_matrix(y_test, y_pred_ann)
cm

fig, ax = plot_confusion_matrix(conf_mat=cm, figsize=(5, 5), cmap=plt.cm.Greens)
plt.xlabel('Predictions', fontsize=10)
plt.ylabel('Actuals', fontsize = 10)
plt.title('Confusion Matrix', fontsize = 10)
plt.show()

plt.plot(history.history['loss'])   ## training loss
plt.plot(history.history['val_loss'])  ## validation loss
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper right')
plt.show()
auc = roc_auc_score(y_test, y_pred_ann)
print('AUC: %f' %auc)

history = model.fit(X_train, y_train, batch_size = 25, epochs = 50, validation_split= 0.25)

y_pred_ann = model.predict(X_test)
y_pred_ann = np.where(y_pred_ann > 0.5, 1, 0)

print(classification_report(y_test, y_pred_ann))

fig, ax = plot_confusion_matrix(conf_mat=cm, figsize=(5, 5), cmap=plt.cm.Greens)
plt.xlabel('Predictions', fontsize=10)
plt.ylabel('Actuals', fontsize = 10)
plt.title('Confusion Matrix', fontsize = 10)
plt.show()

plt.plot(history.history['loss'])   ## training loss
plt.plot(history.history['val_loss'])  ## validation loss
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper right')
plt.show()
auc = roc_auc_score(y_test, y_pred_ann)
print('AUC: %f' %auc)

history = model.fit(X_train, y_train, batch_size = 25, epochs = 30, validation_split= 0.25)

y_pred_ann = model.predict(X_test)
y_pred_ann = np.where(y_pred_ann > 0.5, 1, 0)

fig, ax = plot_confusion_matrix(conf_mat=cm, figsize=(5, 5), cmap=plt.cm.Greens)
plt.xlabel('Predictions', fontsize=10)
plt.ylabel('Actuals', fontsize = 10)
plt.title('Confusion Matrix', fontsize = 10)
plt.show()

print(classification_report(y_test, y_pred_ann))

plt.plot(history.history['loss'])   ## training loss
plt.plot(history.history['val_loss'])  ## validation loss
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper right')
plt.show()
auc = roc_auc_score(y_test, y_pred_ann)
print('AUC: %f' %auc)